using System.Reflection;
using System.Text;

namespace BridgeGenerator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            if (args.Length == 0)
            {
                return;
            }
            StringBuilder exp = new(); //Content of Method Adapter for exports from dlls
            StringBuilder expList = new(); //Content of List of Commands for exports from dlls
            StringBuilder expInstances = new(); //fields for instances of classes
            StringBuilder expMethods = new(); //adapter methods
            exp.AppendLine(@"//AutoGenerated
namespace BridgeConsole
{
    internal class MethodAdapters
    {
        public MethodAdapters() { }
");
            expList.AppendLine(@"//AutoGenerated
namespace BridgeConsole
{
    internal partial class Program
    {
        private static Dictionary<string, BridgeLibrary.Adapter.Base.Cmd> GeneratedAvailableCommands()
        {
            return new() {
");
            foreach (var arg in args)
            {
                Assembly assembly = Assembly.LoadFrom(arg);
                Type[] types = assembly.GetExportedTypes();
                char sep = ' ';
                foreach (Type type in types)
                {
                    var constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly, Array.Empty<Type>());
                    //Console.WriteLine(constructor != null);
                    if (type.FullName != null)
                    {
                        string commandTypeName = type.FullName.Replace('.', '_');
                        string instanceName = commandTypeName;
                        BindingFlags bindingFlags = BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public;
                        if (constructor != null && type.IsTypeDefinition)
                        {
                            expInstances.Append("\t\t").Append(type.FullName).Append(' ').Append(instanceName).AppendLine(" = new();");
                            bindingFlags |= BindingFlags.Instance;
                        }
                        MethodInfo[] methods = type.GetMethods(bindingFlags);
                        if (methods.Length > 0)
                        {
                            Console.WriteLine(type.FullName);
                            foreach (MethodInfo method in methods)
                            {
                                string commandName = $"{commandTypeName}_{method.Name}";
                                string commandMethodName = commandName;
                                expList.Append("\t\t\t\t").Append(sep).Append("{ \"")
                                    .Append(commandName).Append("\", commands.").Append(commandMethodName).AppendLine("}");
                                sep = ',';
                                Console.WriteLine(String.Format("\t\t\t\t[{3}] {0}({1}) : {2}", method.Name, String.Join(", ", method.GetParameters().Select(i => i.ParameterType.ToString()).ToArray()), method.ReturnType.ToString(), method.IsStatic ? 'S' : 'I'));
                                expMethods.Append("\t\tpublic string ").Append(commandMethodName).AppendLine("(string[] args)")
                                    .AppendLine("\t\t{").AppendLine("\t\t\tbool r = false;");
                                ParameterInfo[] parameters = method.GetParameters();
                                string[] names = new string[parameters.Length];
                                foreach (ParameterInfo param in parameters)
                                {
                                    string n = "arg" + param.Position;
                                    expMethods.Append("\t\t\t").Append(param.ParameterType.FullName).Append(' ').Append(n);
                                    if (param.ParameterType == typeof(string))
                                    {
                                        expMethods.Append(" = args[").Append(param.Position).AppendLine("];");
                                    }
                                    else
                                    {
                                        expMethods.AppendLine(";")
                                            .Append("\t\t\tr = ").Append(param.ParameterType.FullName).Append(".TryParse(args[")
                                            .Append(param.Position).Append("], out ").Append(n).AppendLine(");")
                                            .Append("\t\t\tif(! r) return String.Format(\"ERR: argument ").Append(param.Position)
                                            .Append(" ({0}) couldn't be parsed as {1}\", args[").Append(param.Position).Append("], \"").Append(param.ParameterType.FullName)
                                            .AppendLine("\");");
                                    }
                                    names[param.Position] = n;
                                }
                                bool withReturn = method.ReturnType != typeof(void);
                                expMethods.Append("\t\t\t");
                                if(withReturn) expMethods.Append("return ");
                                expMethods.Append(method.IsStatic ? type.FullName : instanceName).Append('.').Append(method.Name)
                                    .Append("(").Append(String.Join(", ", names));
                                if (withReturn)
                                {
                                    expMethods.AppendLine(").ToString();");
                                }
                                else
                                {
                                    expMethods.AppendLine(");")
                                        .AppendLine("\t\t\treturn \"OK\";");
                                }

                                expMethods.AppendLine("\t\t}").AppendLine();

                            }
                        }
                    }
                }
            }
            expList.AppendLine(@"           };
        }
    }
}");
            exp.Append(expInstances);
            exp.Append(expMethods);
            exp.AppendLine(@"
    }
}");
            //Console.WriteLine(expList.ToString());
            //Console.WriteLine(exp.ToString());
            File.WriteAllText("MethodAdapters.cs", exp.ToString(), Encoding.UTF8);
            File.WriteAllText("MethodAdaptersList.cs", expList.ToString(), Encoding.UTF8);
        }
    }
}